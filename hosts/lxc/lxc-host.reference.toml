# use pulumi up with details options to see default values

id = 1
hostname = "example"
description = "managed by pulumi"
enabled = true  # set to false to disable container creation
tags = ["pulumi"]

[stacks]
stack-name = {}  # see folders in hosts/stacks for stack names

[os]
templateFileId = "local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst"
type = "debian"  # alpine, archlinux, centos, debian, devuan, fedora, gentoo, nixos, opensuse, ubuntu, unmanaged

[cpu]
architecture = "amd64"  # amd64, arm64, armhf, i386
cores = 2
units = 1024

[memory]
dedicated = 4096  # MB
swap = 2048       # MB

[disk]
datastoreId = "fast"
size = 8  # GB

[[mountPoints]]
volume = "/void/media"       # can also use storage:size format (ex: local:8)
mountPoint = "/mnt/media"    # path inside container
size = 10                    # GB
replicate = true
acl = false
backup = false               # bind mounts cannot be included in backups
quota = false
shared = false

[[devicePassthroughs]]
path = "/dev/dri/card0"  # example: GPU passthrough for hardware acceleration
uid = 0
gid = 44
mode = "0660"
denyWrite = false        # optional: deny write access to the device

[firewallOptions]
enabled = true           # enable/disable firewall
dhcp = true             # enable DHCP
ndp = true              # enable NDP (Neighbor Discovery Protocol)
radv = false            # enable Router Advertisement
macfilter = true        # enable/disable MAC address filter
ipfilter = false        # enable default IP filters
inputPolicy = "DROP"    # default input policy: ACCEPT, REJECT, DROP
outputPolicy = "ACCEPT" # default output policy: ACCEPT, REJECT, DROP
logLevelIn = "nolog"    # log level for incoming traffic: emerg, alert, crit, err, warning, notice, info, debug, nolog
logLevelOut = "nolog"   # log level for outgoing traffic: emerg, alert, crit, err, warning, notice, info, debug, nolog

[[firewallRules]]
enabled = true          # enable/disable this rule
type = "in"            # direction: in, out
action = "ACCEPT"      # action: ACCEPT, REJECT, DROP
comment = "Allow SSH"  # optional comment
source = "192.168.1.0/24"  # source IP/network (optional)
sport = "22"           # source port (optional)
dest = "10.0.0.1"      # destination IP/network (optional)
dport = "22"           # destination port (optional)
iface = "net0"         # network interface (optional)
log = "info"           # log level: emerg, alert, crit, err, warning, notice, info, debug, nolog (optional)
macro = "SSH"          # firewall macro (optional) - see constants.ts for available macros
pos = 1                # position in rule list (optional)
proto = "tcp"          # protocol (optional)
securityGroup = "web"  # security group (optional)

# Script provisioner example
[[provisioners]]
type = "script"
script = "/path/to/script.sh"
workingDirectory = "/tmp"  # default: /tmp
runAs = "root"            # default: root
timeout = 600             # seconds, default: 600
runOn = ["create"]        # when to run: create, update, delete - default: ["create"]

[provisioners.environment]  # optional environment variables
DEBIAN_FRONTEND = "noninteractive"
CUSTOM_VAR = "value"

[provisioners.connection]   # optional connection override
host = "custom.host.com"
user = "custom-user"
port = 2222
privateKey = "/path/to/key"

# Ansible provisioner example
[[provisioners]]
type = "ansible"
playbook = "/path/to/playbook.yml"
user = "root"                    # default: root
privateKeyFile = "~/.ssh/lxc_ed25519"  # default: ~/.ssh/lxc_ed25519
timeout = 600                    # seconds, default: 600
replayable = true               # default: true
tags = ["setup", "config"]     # optional ansible tags
limit = "webservers"            # optional ansible limit

[provisioners.variables]        # optional ansible variables
database_host = "db.example.com"
app_version = "1.2.3"

[provisioners.connection]       # optional connection override
host = "custom.host.com"
user = "custom-user"
port = 2222
privateKey = "/path/to/key"
