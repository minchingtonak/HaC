// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vault extends pulumi.CustomResource {
    /**
     * Get an existing Vault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultState, opts?: pulumi.CustomResourceOptions): Vault {
        return new Vault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ansible:index/vault:Vault';

    /**
     * Returns true if the given object is an instance of Vault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vault.__pulumiType;
    }

    declare public readonly ansibleVaultId: pulumi.Output<string>;
    declare public /*out*/ readonly args: pulumi.Output<string[]>;
    /**
     * Path to encrypted vault file.
     */
    declare public readonly vaultFile: pulumi.Output<string>;
    /**
     * ID of the encrypted vault file.
     */
    declare public readonly vaultId: pulumi.Output<string | undefined>;
    /**
     * Path to vault password file.
     */
    declare public readonly vaultPasswordFile: pulumi.Output<string>;
    declare public /*out*/ readonly yaml: pulumi.Output<string>;

    /**
     * Create a Vault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultArgs | VaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultState | undefined;
            resourceInputs["ansibleVaultId"] = state?.ansibleVaultId;
            resourceInputs["args"] = state?.args;
            resourceInputs["vaultFile"] = state?.vaultFile;
            resourceInputs["vaultId"] = state?.vaultId;
            resourceInputs["vaultPasswordFile"] = state?.vaultPasswordFile;
            resourceInputs["yaml"] = state?.yaml;
        } else {
            const args = argsOrState as VaultArgs | undefined;
            if (args?.vaultFile === undefined && !opts.urn) {
                throw new Error("Missing required property 'vaultFile'");
            }
            if (args?.vaultPasswordFile === undefined && !opts.urn) {
                throw new Error("Missing required property 'vaultPasswordFile'");
            }
            resourceInputs["ansibleVaultId"] = args?.ansibleVaultId;
            resourceInputs["vaultFile"] = args?.vaultFile;
            resourceInputs["vaultId"] = args?.vaultId;
            resourceInputs["vaultPasswordFile"] = args?.vaultPasswordFile;
            resourceInputs["args"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["yaml"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Vault.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vault resources.
 */
export interface VaultState {
    ansibleVaultId?: pulumi.Input<string>;
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to encrypted vault file.
     */
    vaultFile?: pulumi.Input<string>;
    /**
     * ID of the encrypted vault file.
     */
    vaultId?: pulumi.Input<string>;
    /**
     * Path to vault password file.
     */
    vaultPasswordFile?: pulumi.Input<string>;
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vault resource.
 */
export interface VaultArgs {
    ansibleVaultId?: pulumi.Input<string>;
    /**
     * Path to encrypted vault file.
     */
    vaultFile: pulumi.Input<string>;
    /**
     * ID of the encrypted vault file.
     */
    vaultId?: pulumi.Input<string>;
    /**
     * Path to vault password file.
     */
    vaultPasswordFile: pulumi.Input<string>;
}
