// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'porkbun:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * The answer content for the record. Please see the DNS management popup from the domain management console for proper
     * formatting of each record type.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * The domain for the record being created.
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * The full name of the record being created, including the subdomain and the domain itself.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly notes: pulumi.Output<string>;
    /**
     * The priority of the record for those that support it.
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * The subdomain for the record being created, not including the domain itself. Omit to create a record on the root domain.
     * Use * to create a wildcard record.
     */
    declare public readonly subdomain: pulumi.Output<string | undefined>;
    /**
     * The time to live in seconds for the record. The minimum and the default is 600 seconds.
     */
    declare public readonly ttl: pulumi.Output<number>;
    /**
     * The type of record being created. Valid types are: A, MX, CNAME, ALIAS, TXT, NS, AAAA, SRV, TLSA, CAA, HTTPS, SVCB.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["content"] = state?.content;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["name"] = state?.name;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["subdomain"] = state?.subdomain;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["content"] = args?.content;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["subdomain"] = args?.subdomain;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["notes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * The answer content for the record. Please see the DNS management popup from the domain management console for proper
     * formatting of each record type.
     */
    content?: pulumi.Input<string>;
    /**
     * The domain for the record being created.
     */
    domain?: pulumi.Input<string>;
    /**
     * The full name of the record being created, including the subdomain and the domain itself.
     */
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    /**
     * The priority of the record for those that support it.
     */
    priority?: pulumi.Input<number>;
    /**
     * The subdomain for the record being created, not including the domain itself. Omit to create a record on the root domain.
     * Use * to create a wildcard record.
     */
    subdomain?: pulumi.Input<string>;
    /**
     * The time to live in seconds for the record. The minimum and the default is 600 seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of record being created. Valid types are: A, MX, CNAME, ALIAS, TXT, NS, AAAA, SRV, TLSA, CAA, HTTPS, SVCB.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * The answer content for the record. Please see the DNS management popup from the domain management console for proper
     * formatting of each record type.
     */
    content: pulumi.Input<string>;
    /**
     * The domain for the record being created.
     */
    domain: pulumi.Input<string>;
    /**
     * The priority of the record for those that support it.
     */
    priority?: pulumi.Input<number>;
    /**
     * The subdomain for the record being created, not including the domain itself. Omit to create a record on the root domain.
     * Use * to create a wildcard record.
     */
    subdomain?: pulumi.Input<string>;
    /**
     * The time to live in seconds for the record. The minimum and the default is 600 seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of record being created. Valid types are: A, MX, CNAME, ALIAS, TXT, NS, AAAA, SRV, TLSA, CAA, HTTPS, SVCB.
     */
    type: pulumi.Input<string>;
}
