// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { PlaybookArgs, PlaybookState } from "./playbook";
export type Playbook = import("./playbook").Playbook;
export const Playbook: typeof import("./playbook").Playbook = null as any;
utilities.lazyLoad(exports, ["Playbook"], () => require("./playbook"));

export * from "./provider";
import { Provider } from "./provider";

export { VaultArgs, VaultState } from "./vault";
export type Vault = import("./vault").Vault;
export const Vault: typeof import("./vault").Vault = null as any;
utilities.lazyLoad(exports, ["Vault"], () => require("./vault"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ansible:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "ansible:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "ansible:index/playbook:Playbook":
                return new Playbook(name, <any>undefined, { urn })
            case "ansible:index/vault:Vault":
                return new Vault(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ansible", "index/group", _module)
pulumi.runtime.registerResourceModule("ansible", "index/host", _module)
pulumi.runtime.registerResourceModule("ansible", "index/playbook", _module)
pulumi.runtime.registerResourceModule("ansible", "index/vault", _module)
pulumi.runtime.registerResourcePackage("ansible", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ansible") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
