// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DomainNameserversArgs, DomainNameserversState } from "./domainNameservers";
export type DomainNameservers = import("./domainNameservers").DomainNameservers;
export const DomainNameservers: typeof import("./domainNameservers").DomainNameservers = null as any;
utilities.lazyLoad(exports, ["DomainNameservers"], () => require("./domainNameservers"));

export { GetDnsRecordArgs, GetDnsRecordResult, GetDnsRecordOutputArgs } from "./getDnsRecord";
export const getDnsRecord: typeof import("./getDnsRecord").getDnsRecord = null as any;
export const getDnsRecordOutput: typeof import("./getDnsRecord").getDnsRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecord","getDnsRecordOutput"], () => require("./getDnsRecord"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDomainNameserversArgs, GetDomainNameserversResult, GetDomainNameserversOutputArgs } from "./getDomainNameservers";
export const getDomainNameservers: typeof import("./getDomainNameservers").getDomainNameservers = null as any;
export const getDomainNameserversOutput: typeof import("./getDomainNameservers").getDomainNameserversOutput = null as any;
utilities.lazyLoad(exports, ["getDomainNameservers","getDomainNameserversOutput"], () => require("./getDomainNameservers"));

export { GetDomainsResult } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export * from "./provider";
import { Provider } from "./provider";


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "porkbun:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "porkbun:index/domainNameservers:DomainNameservers":
                return new DomainNameservers(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("porkbun", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("porkbun", "index/domainNameservers", _module)
pulumi.runtime.registerResourcePackage("porkbun", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:porkbun") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
